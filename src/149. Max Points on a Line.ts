import assert from 'assert';

const funcs = [
    function maxPoints(points: number[][]): number {
        let result = 0;
        let m2count = new Map<number, number>();
        for (let i = 0; i < points.length; i++) {
            const x1 = points[i][0];
            const y1 = points[i][1];
            for (let j = i + 1; j < points.length; j++) {
                const x2 = points[j][0];
                const y2 = points[j][1];
                const m = x2 === x1 ? x1 << 16 : (y2 - y1) / (x2 - x1);
                const count = (m2count.get(m) ?? 0) + 1;
                m2count.set(m, count);
                result = Math.max(result, count);
            }
            m2count = new Map();
        }
        return result + 1;
    },
    function maxPoints(points: number[][]): number {
        let result = 0;
        let ab2count = new Map<number, number>();
        function gcd(a: number, b: number): number {
            return b === 0 ? a : gcd(b, a % b);
        }

        for (let i = 0; i < points.length; i++) {
            for (let j = i + 1; j < points.length; j++) {
                const [x1, y1] = points[i];
                const [x2, y2] = points[j];
                const sign = Math.sign(x2 - x1);
                const a = sign * (x2 - x1),
                    b = sign * (y2 - y1);
                const gcdAB = Math.abs(gcd(a, b));
                const A = a / gcdAB,
                    B = b / gcdAB;
                const AB = (A << 16) | (B + 2e4);
                const count = (ab2count.get(AB) ?? 0) + 1;
                ab2count.set(AB, count);
                result = Math.max(result, count);
            }
            ab2count = new Map();
        }
        return result + 1;
    },
    function maxPoints(points: number[][]): number {
        let result = 0;
        let key2count = new Map<string, number>();
        function gcd(a: number, b: number): number {
            return b === 0 ? a : gcd(b, a % b);
        }

        for (let i = 0; i < points.length; i++) {
            for (let j = i + 1; j < points.length; j++) {
                const [x1, y1] = points[i];
                const [x2, y2] = points[j];
                const sign = Math.sign(x2 - x1);
                const a = sign * (x2 - x1);
                const b = sign * (y2 - y1);
                const c = sign * (x2 * y1 - x1 * y2);
                const gcdABC = Math.abs(gcd(gcd(a, b), c));
                const key = `${a / gcdABC}:${b / gcdABC}:${c / gcdABC}`;
                const count = (key2count.get(key) ?? 0) + 1;
                key2count.set(key, count);
                result = Math.max(result, count);
            }
            key2count = new Map();
        }
        return result + 1;
    },
    function maxPoints(points: number[][]): number {
        let result = 1;
        for (let i = 0; i < points.length; i++) {
            for (let j = i + 1; j < points.length; j++) {
                let count = 0;
                const [x1, y1] = points[i];
                const [x2, y2] = points[j];
                for (let k = 0; k < points.length; k++) {
                    const [x3, y3] = points[k];
                    if ((y3 - y2) * (x2 - x1) === (y2 - y1) * (x3 - x2)) count++;
                }
                result = Math.max(result, count);
            }
        }
        return result;
    },
];

type TestCase = Parameters<(typeof funcs)[number]>;
function* testCaseIterator(): Generator<TestCase> {
    yield [
        [
            [0, 0],
            [1, 0],
            [2, 0],
            [3, 0],
        ],
    ];
    yield [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
        ],
    ];
    yield [
        [
            [-2538, -6901],
            [2966, -8226],
            [1675, -6131],
            [5790, -6841],
            [-1462, 3223],
            [4074, 5446],
            [-6201, 2033],
            [2320, 7050],
            [1999, 1409],
            [1637, 7814],
            [6517, 5470],
            [-8779, 5681],
            [-6630, 408],
            [-3397, 3610],
            [-1171, 4622],
            [1389, -9633],
            [-5749, 677],
            [-950, -1557],
            [-7208, 3671],
            [3271, -3417],
            [7081, -7411],
            [-1300, 8567],
            [-9947, 1491],
            [-6512, 8738],
            [5212, -3819],
            [9156, 8433],
            [4379, -1837],
            [-3898, -637],
            [7717, 1085],
            [2071, -6952],
            [-6279, -4555],
            [-382, -4256],
            [-1954, -9105],
            [1927, 9240],
            [-4493, -4601],
            [5576, 7882],
            [3075, 2267],
            [-3212, -4288],
            [7072, 8246],
            [-3039, 4451],
            [-3522, 4000],
            [2244, -998],
            [883, -657],
            [-7003, -220],
            [4474, 7528],
            [-5177, -2194],
            [6, 3371],
            [1399, 7234],
            [1126, 4526],
            [371, 4352],
            [7804, -5389],
            [-3287, -9706],
            [-3812, 323],
            [-3771, 5119],
            [-4732, 6448],
            [9310, 8709],
            [-7955, 7307],
            [2061, -947],
            [-6397, -7425],
            [-7558, 6426],
            [-4712, 6573],
            [-3034, -4904],
            [-5508, 5581],
            [-6965, 8890],
            [2550, 1942],
            [-4597, -9624],
            [3331, 0],
            [4006, 2366],
            [-2794, -2249],
            [-1318, -2642],
            [5805, -4567],
            [4537, -7456],
            [8125, 3001],
            [-6693, 5429],
            [5608, -4129],
            [1588, -3403],
            [5504, -3654],
            [-6535, 7381],
            [-8642, 770],
            [-5939, 1604],
            [3668, 9102],
            [8402, 6932],
            [-3459, 7490],
            [3073, 8103],
            [-6083, 2857],
            [-3182, 1402],
            [-2918, 9778],
            [-8959, -3994],
            [146, -5512],
            [1427, 1359],
            [3894, 6625],
            [1620, -3173],
            [-1927, 9677],
            [-927, -8131],
            [-1501, -8656],
            [-3854, -9961],
            [-2728, -4402],
            [-2734, 7085],
            [2872, -2783],
            [-664, -5818],
            [4277, 7216],
            [7243, 863],
            [6389, 5819],
            [5772, 2509],
            [-5354, 2421],
            [-4469, -9664],
            [-1217, 880],
            [3748, -8679],
            [4635, 1661],
            [-6765, -375],
            [4915, -1388],
            [6553, -4147],
            [2238, 8544],
            [-8842, 4582],
            [2166, 7509],
            [8153, 2535],
            [-5805, 10],
            [-5394, -5112],
            [-4943, -4175],
            [-3898, 1493],
            [740, -8410],
            [-3430, 4001],
            [-9776, 9016],
            [3757, 5206],
            [2834, 455],
            [6886, 1706],
            [-1675, -5672],
            [4139, 4147],
            [9609, 6584],
            [137, -4423],
            [-2336, -7861],
            [6511, -6049],
            [7658, 2179],
            [1511, -5196],
            [4143, 7445],
            [-841, 3905],
            [3146, 6305],
            [-6609, 7138],
            [-9875, 8250],
            [2095, -1524],
            [-3430, -7969],
            [-7273, -8817],
            [-1786, 5846],
            [-7977, -3561],
            [-7472, -8735],
            [7026, -4453],
            [-9549, 2954],
            [9300, 27],
            [495, 1101],
            [-3763, -9818],
            [5988, 5720],
            [3698, 7742],
            [-6615, 7747],
            [-3512, -9088],
            [1698, -450],
            [3307, -1482],
            [-3151, -9048],
            [-9718, -5426],
            [-3678, -1948],
            [5541, 2444],
            [7395, -2562],
            [-9761, 1040],
            [-1171, 7431],
            [-7201, -5108],
            [-4210, 6085],
            [-9644, 3002],
            [354, -1579],
            [3947, 2977],
            [-1001, -3218],
            [-7984, -5291],
            [1580, -9217],
            [-4103, 5908],
            [9871, -8772],
            [3207, 7283],
            [-4957, 6364],
            [6990, 5182],
            [583, 8830],
            [4492, -792],
            [8904, -9895],
            [8226, -5725],
            [4703, 1359],
            [-7669, 9293],
            [-6786, -5132],
            [3036, -8432],
            [8993, 7315],
            [-6978, 267],
            [-1734, 6538],
            [9521, -7151],
            [6815, 1518],
            [4637, 2778],
            [-9550, -405],
            [9515, 9419],
            [920, 3541],
            [-3966, -8190],
            [5275, -8820],
            [-3441, 1224],
            [6029, -6],
            [-2502, 7794],
            [-2066, 6433],
            [3105, 612],
            [9027, 5543],
            [-3847, -1567],
            [4312, -3929],
            [-3739, -9186],
            [8894, 8697],
            [-3888, -1088],
            [-3390, -4544],
            [-6325, -1045],
            [-3527, 7305],
            [5023, -4635],
            [6169, -6736],
            [-8356, -1494],
            [4255, 8421],
            [-2750, -5378],
            [4819, 8375],
            [5100, -8943],
            [-1373, 1640],
            [-6343, -6321],
            [5686, -8674],
            [19, 7987],
            [-1095, 8741],
            [-3175, -394],
            [3048, -4213],
            [-572, -7025],
            [-2551, 4079],
            [-2062, 7148],
            [6434, -4508],
            [5499, 8018],
            [-6547, 2423],
            [6865, 3686],
            [8204, 8844],
            [-6547, -7164],
            [2020, -7355],
            [5642, 234],
            [-2344, 6778],
            [-1513, -4291],
            [-9857, -5251],
            [7350, 764],
            [-771, 7605],
            [994, 6004],
            [5386, -3997],
            [-4096, -4694],
            [1961, -2293],
            [9337, -3324],
            [-1474, -6075],
            [4211, -7349],
            [8529, 9357],
            [8476, -5783],
            [9965, 3242],
            [8900, 3051],
            [4321, 6231],
            [-3533, 7376],
            [6130, 8361],
            [-9631, 1250],
            [5069, -267],
            [-7965, 3249],
            [7017, -7152],
            [5527, -6560],
            [4130, 7786],
            [-5133, 5526],
            [2555, -8732],
            [-8065, -2226],
            [7755, -4108],
            [-804, -8683],
            [-3372, -1477],
            [-4860, -7692],
            [-4666, -1691],
            [8596, 7911],
            [-1704, 1092],
            [-4160, -3374],
            [5839, 2274],
            [-2646, -5225],
            [-383, -7876],
            [-5141, -8588],
            [-8538, -4778],
            [8910, 538],
            [-2750, 9196],
            [-3202, -9806],
            [9460, -9470],
            [-2768, 7335],
            [-1070, 6511],
            [1096, 54],
            [9897, -6082],
            [8421, 601],
            [-3764, -5916],
            [-1742, 7566],
            [7949, -9828],
            [-8233, -8990],
            [9895, -1584],
            [4092, 9256],
            [-7351, 849],
            [-4439, 6342],
            [9767, 1018],
            [2000, 9324],
            [6792, 6785],
            [-6593, -5230],
            [9741, 9444],
            [5225, -6532],
            [6557, -3308],
            [8867, 4973],
        ],
    ];
    const N = 300;
    const MAX = 10 ** 4;
    for (let i = 0; i < 1000; i++) {
        yield [
            Array.from(
                new Set(
                    Array(N)
                        .fill(undefined)
                        .map(() => JSON.stringify([(Math.random() * 2 * MAX - MAX) >> 0, (Math.random() * 2 * MAX - MAX) >> 0]))
                )
            ).map((s) => JSON.parse(s)),
        ];
    }
}

function test(testCase: TestCase, actualFuncInd: number, expectedFuncInd: number): boolean {
    try {
        assert.deepStrictEqual(funcs[actualFuncInd](...testCase), funcs[expectedFuncInd](...testCase));
        return true;
    } catch (e) {
        console.log('❌'.repeat(32));
        console.log(`actualFuncInd: ${actualFuncInd}`);
        console.log(`expectedFuncInd: ${expectedFuncInd}`);
        console.log(`testCase: ${JSON.stringify(testCase)}`);
        if (e instanceof assert.AssertionError) {
            console.log(e.message);
        } else {
            console.error(e);
        }
        return false;
    }
}

{
    let count = 0;
    outer: for (const testCase of testCaseIterator()) {
        if (++count < 10) {
            console.log('----------------------------------------------------');
            console.log(`Testcase ${count}:`);
            console.log(JSON.stringify(testCase, undefined, 2));
        }
        for (let i = 0; i < funcs.length - 1; i++) {
            if (!test(testCase, i, i + 1)) break outer;
        }
    }
}
